<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
		<!--  단방향 암호화처리를 하는 클래스를 bean으로 등록 
				BCryptPasswordEncoder클래스를 이용
				이전방식 sha512  방식에서   변경할떄  sort소트값?을 이용하여  같은 1234를 암호화해도  다르게 나온다.
				즉 암호화 처리가 강화되어  이전에  동등비교 방식이 안되어
				제공하는 match 라는 메소드를 이용하여    맞는지 확인한다.		
			 -->
		<bean id="bcryptPassword" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
		
		<!--  클라이언트 요청에 대한 인증처리하는 설정  -->
		<security:http auto-config="true">
			<!--
				로그인처리하는 로직에 대한 설정
				username-parameter :로그인 처리값중 id 값을 받아오는 이름(name속성명)
				password-parameter : 로그인 처리값중 password  값을 받아오는 이름 (name속성명)
				default-target-url : 로그인 성공시 기본으로   연결되는 페이지
				login-page : 기본 로그인페이지 가 아닌 생성한 페이지로 이동할때 사용 연결할 주소를 작성
				authentication-failure-forward-url : 인증실패시 연결되는 페이지 주소
			  	authentication-success-forward-url : 인증성공시 연결되는 주소 
			  	login-processing-url : 로그인 로직처리시 실행할 메소드 지정
			  	
			  -->
			<security:form-login 
			login-page="/member/loginpage.do"
			username-parameter="userId" 
			password-parameter="password" 
			default-target-url="/"
			authentication-failure-forward-url="/error.do"
			authentication-success-forward-url="/successLogin.do"
			/>
			
			<security:csrf disabled="true"/>
			
			<!--  인증을 받아야하는 주소를 등록하기  -->
			<security:intercept-url pattern="/" access="permitAll()"/>
			<!--이미지 파일드에 대한 허용  -->
			<security:intercept-url pattern="/resources/**" access="permitAll()"/>
			<!--  -->
			<security:intercept-url pattern="/member/loginpage.do" access="permitAll()"/>
			
			<security:intercept-url pattern="/member/memberEnroll.do" access="permitAll()"/>
			<security:intercept-url pattern="/admin/*" access="hasRole('ROLE_ADMIN')"/>
			
			<!--어떤주소는 어떤 권한이 있느냐?  -->
			<!--인증을 받아야하는 주소를 등록하기-->
			<!--전체주소에대해서는  일반사용자의 권한을 가져야한다.  -->
			<security:intercept-url pattern="/**" access="hasRole('ROLE_USER')"/>
			
			<!--  로그아웃처리하기  -->
			<security:logout logout-url="/logout" logout-success-url="/"/>
			
			<!--  권한에 맞지않는 주소에 접근했을때   -->
			<security:access-denied-handler error-page="/WEB-INF/views/error/adminError.jsp"/>
		</security:http>
		
		
			
			
		
		<!--  
				인증받을 방법에 대한 설정 
				1. inmemory xml에 내부에 인증받을 수 있는 아이디 패스워드를 저장해놓은것
				2.
			 -->
		<security:authentication-manager>
			<!--인메모리 방식  -->
			<!-- <security:authentication-provider>
				<security:user-service>
					<security:user name="admin" authorities="ROLE_USER" 
					password="$2a$10$.hFu8OOANRwcfdHOC/HWHesQUv/k0Xbcv50.6R4TlGZBh3CaH1TCa"/>
				</security:user-service>
				<security:password-encoder ref="bcryptPassword"/>
			</security:authentication-provider> -->
			
			<!--
				db와 연동하여 인증처리하는 provider 제공하기
			  	1.인증한 내뇽을 저장할 클래스를  생성 -> User(클래스) ,UserDetails 인터페이스 구현     // 인증기간이 만효됬는지 에대한 메소드 있음
			  	2.인증을 처리하는 service를 구현을 해줌 UserDetailServie 인터페이스 구현    
			  	3.security:authentication-provider 를 이용해서 service를설정을 해줌
			  	ex.context :component-scan등록해서 springbean 을 가져오게 설정하기 
			  -->
			<security:authentication-provider user-service-ref="loginService">
				<security:password-encoder ref="bcryptPassword"/>
			</security:authentication-provider>	
		</security:authentication-manager>
		
		<bean id="loginService" class="com.bs.spring.security.SecurityService"/>
			<!--  이게 있어야  dao객체등 생성할수 있음-->
			<context:component-scan  base-package="com.bs.spring" />			
			
			
			
		
</beans>